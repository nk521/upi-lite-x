"""
For source generated by either of these:
1. https://github.com/VivoKey/nfc-snoop-dogg
2. `adb shell dumpsys nfc > some.dump` parsed with https://github.com/VivoKey/NFCSnoopDecoder
"""

from dataclasses import dataclass
import sys


@dataclass
class hexdump:
    # source: https://gist.github.com/NeatMonster/c06c61ba4114a2b31418a364341c26c0
    buf: bytearray
    off: int = 0
    width: int = 64
    print_off: bool = False

    def __iter__(self):
        pad = 1
        last_bs, last_line = None, None
        for i in range(0, len(self.buf), self.width):
            bs = bytearray(self.buf[i : i + self.width])
            _format = f"{{:{pad}}} {{}} {{:{self.width + (self.width//2)}}}  {{:{self.width + (self.width//2)}}}  |{{:{self.width}}}|"
            line = _format.format(
                "",
                "" if not self.print_off else self.off + i,
                " ".join(("{:02x}".format(x) for x in bs[:self.width//2])),
                " ".join(("{:02x}".format(x) for x in bs[self.width//2:])),
                "".join((chr(x) if 32 <= x < 127 else "." for x in bs)),
            )
            if bs == last_bs:
                line = "*"
            if bs != last_bs or line != last_line:
                yield line
            last_bs, last_line = bs, line
            pad = 6

    def __str__(self):
        return "\n".join(self)

    def __repr__(self):
        return "\n".join(self)


last_dir = ""


def parse_and_print(inp: str) -> None:
    global last_dir
    direction = "SENT" if inp[0:3] == "<--" else "RCVD"
    data = inp[4:]

    to_print = "\033[0;34m" if direction == "RCVD" else "\033[0;32m"
    to_print += direction
    to_print += " "
    to_print += "{}".format(hexdump(bytearray.fromhex(data)))
    to_print += "\033[0m"

    if last_dir != direction:
        print()

    print(to_print)

    last_dir = direction


file_in = sys.argv[1]
out_stdout = False

if len(sys.argv) > 2:
    file_out = sys.argv[2]
else:
    out_stdout = True

with open(file_in, "r") as f:
    for line in f:
        parse_and_print(line)
